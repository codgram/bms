@page "/works/custom/{workHeaderId?}"
@using Application.Model.Work
@using Application.Model.Enum
@inject NavigationManager _navigationManager
@inject StateContainer _stateContainer
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client


<h3 class="mb-4">@(CustomWorkHeader is not null ? CustomWorkHeader.DocumentNo : "loading...")</h3>

@if(String.IsNullOrEmpty(workHeaderId))
{
    @* <EditForm Model="CustomWorkHeader" OnValidSubmit="@CreateCustomWorkHeader">
        <DataAnnotationsValidator />
        <ValidationSummary />

      <div class="col-sm-6">
        <label for="firstName" class="form-label">Document No</label>
        <InputText type="text" class="form-control" id="firstName" placeholder="" @bind-Value="CustomWorkHeader.DocumentNo" required="" />
        <div class="invalid-feedback">
          Document No is required!
        </div>
      </div>


      <div class="fixed-bottom p-3 text-center d-flex justify-content-between">
    
            <a href="/" type="button" class="btn btn-secondary">Cancel</a>
            <button type="submit" class="btn btn-primary">Select</button>
    
      </div>

    </EditForm> *@
    


    <h4 class="mt-5 mb-3">Or choose from below!</h4>

    <div class="list-group w-auto">

    @if(CustomWorkHeaders is not null)
    {
      foreach (var customWorkHeader in CustomWorkHeaders.Where(c => c.Status == DocumentStatus.Open))
      {

        <a @onclick='@(() => SelectCustomWorkHeader(customWorkHeader.Id))' class="list-group-item list-group-item-action d-flex gap-3 py-3" aria-current="true">
          <div class="d-flex gap-2 w-100 justify-content-between">
            <div>
              <h6 class="mb-0">@customWorkHeader.DocumentNo</h6>
              @* <p class="mb-0 opacity-75">VEN0001 - Test Vendor 1</p> *@
            </div>
            <small class="opacity-50 text-nowrap">@customWorkHeader.CreatedOn</small>
          </div>
        </a>
        
      }
    }
    </div>

    
}

else {


    <EditForm Model="@CustomWorkLine" OnValidSubmit="@AddCustomWorkLine">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="col-sm-6">
          <label for="barcode" class="form-label">Barcode No</label>
          <InputText type="text" class="form-control" id="barcode" @bind-Value="CustomWorkLine.BarcodeNo" placeholder="" required="true" />
          <div class="invalid-feedback">
            Barcode No is required!
          </div>
        </div>

        <div class="col-sm-6">
          <label for="quantity" class="form-label">Expiry Date</label>
          <InputDate class="form-control" id="quantity" @bind-Value="CustomWorkLine.ExpiryDate" placeholder="" required="true" />
          <div class="invalid-feedback">
            Quantity is required!
          </div>
        </div>

        <div class="col-sm-6">
          <label for="quantity" class="form-label">Quantity</label>
          <InputNumber type="number" class="form-control" id="quantity" @bind-Value="CustomWorkLine.Quantity" placeholder="" required="true" />
          <div class="invalid-feedback">
            Quantity is required!
          </div>
        </div>

        <div class="fixed-bottom px-3 py-2 text-center d-flex justify-content-between bg-white">
    
            <a href="/works/custom" type="button" class="btn btn-secondary">Cancel</a>

            <button @onclick="ReleaseCustomWorkHeader" type="button" class="btn btn-primary">Release</button>
            <button type="submit" class="btn btn-primary">Add</button>
    
        </div>
    </EditForm>


    



    <h4 class="pb-3 mt-5">Received Items</h4>

    <div class="col-sm-6 mb-3">
      <input type="text" class="form-control" id="barcode" placeholder="Search barcode" @bind="@SearchBarcode"  @bind:event="oninput" required="false" />
    </div>

    <div class="list-group col-sm-6 mb-16">

        @if(CustomWorkLinesFiltered is not null)
        {
            @foreach (var line in CustomWorkLinesFiltered.OrderByDescending(c => c.CreatedOn))
            {
                <a class="list-group-item list-group-item-action d-flex gap-3 py-3" aria-current="true" @onclick="@(() => DeleteLoadLine(line))">
                  <div class="d-flex gap-2 w-100 justify-content-between">
                    <div>
                      <h6 class="mb-1">@line.BarcodeNo</h6>
                      <p class="mb-0 opacity-75">@line.ItemNo - @line.Description - @line.Size</p>
                    </div>
                    <small class="opacity-50 text-nowrap">@line.Quantity</small>
                  </div>
                </a>
            }
            

        }
    </div>
}







@code
{
    [Parameter] public string workHeaderId { get; set; }
    public string SearchBarcode { get; set; }
    public CustomWorkHeader CustomWorkHeader = new CustomWorkHeader();
    public List<CustomWorkHeader> CustomWorkHeaders { get; set; }
    public List<CustomWorkLine> CustomWorkLines = new List<CustomWorkLine>();
    public List<CustomWorkLine> CustomWorkLinesFiltered => !String.IsNullOrEmpty(SearchBarcode) ? CustomWorkLines.Where(x => x.BarcodeNo.Contains(SearchBarcode)).ToList() : CustomWorkLines;
    public CustomWorkLine CustomWorkLine = new CustomWorkLine();


    protected override async Task OnInitializedAsync()
    {
        if(String.IsNullOrEmpty(workHeaderId) && _stateContainer.Company is not null)
        {
            CustomWorkHeaders = await _client.GetFromJsonAsync<List<CustomWorkHeader>>($"api/works/custom/headers/filter?companyId={_stateContainer.Company.Id}");
        }
        else
        {
            if(CustomWorkHeaders is null)
            {
              CustomWorkHeaders = await _client.GetFromJsonAsync<List<CustomWorkHeader>>($"api/works/custom/headers/filter?companyId={_stateContainer.Company.Id}");
            }
            CustomWorkHeader = CustomWorkHeaders.FirstOrDefault(c => c.Id == workHeaderId);
            Console.WriteLine("CustomWorkHeader: " + CustomWorkHeader.DocumentNo);
            CustomWorkLines = await _client.GetFromJsonAsync<List<CustomWorkLine>>($"api/works/custom/lines/filter?companyId={CustomWorkHeader.CompanyId}&customWorkHeaderId={CustomWorkHeader.Id}");
        }
    }

    private async Task SelectCustomWorkHeader(string workHeaderId)
    {
        CustomWorkHeader = CustomWorkHeaders.FirstOrDefault(c => c.Id == workHeaderId);
        Console.WriteLine("CustomWorkHeader: " + CustomWorkHeader.DocumentNo);
        CustomWorkLines = await _client.GetFromJsonAsync<List<CustomWorkLine>>($"api/works/custom/lines/filter?companyId={CustomWorkHeader.CompanyId}&customWorkHeaderId={CustomWorkHeader.Id}");

          _navigationManager.NavigateTo($"/works/custom/{workHeaderId}");
    }

    private async Task AddCustomWorkLine()
    {
        if(CustomWorkLines.Select(c => c.BarcodeNo).Contains(CustomWorkLine.BarcodeNo))
        {
            var customWorkLine = CustomWorkLines.FirstOrDefault(c => c.BarcodeNo == CustomWorkLine.BarcodeNo);

            customWorkLine.Quantity  += CustomWorkLine.Quantity;

            // edit customWorkLine in database
            await _client.PutAsJsonAsync($"api/works/custom/lines/{customWorkLine.Id}", customWorkLine);
        }
        else
        {
            CustomWorkLine.CustomWorkHeaderId = CustomWorkHeader.Id;
            
            var request = await _client.PostAsJsonAsync("api/works/custom/lines", CustomWorkLine);

            // get the custom work line from the request response
            var customWorkLine = await request.Content.ReadFromJsonAsync<CustomWorkLine>();
            CustomWorkLines.Add(customWorkLine);

        }

        CustomWorkLine = new CustomWorkLine();
    }

    private async Task CreateCustomWorkHeader()
    {
        if(!CustomWorkHeaders.Any(c => c.Id == workHeaderId))
        {
          CustomWorkHeader.CompanyId = _stateContainer.Company.Id;

          var response = await _client.PostAsJsonAsync("api/works/custom/headers", CustomWorkHeader);

          if(response.IsSuccessStatusCode)
          {
            _navigationManager.NavigateTo($"works/custom/{CustomWorkHeader.DocumentNo}");
          } 
        }
        else
        {
          _navigationManager.NavigateTo($"works/custom/{CustomWorkHeader.DocumentNo}");
        }
    }

    private async Task ReleaseCustomWorkHeader()
    {
        CustomWorkHeader.Status = Model.Enum.DocumentStatus.Released;

        await _client.PutAsJsonAsync($"api/works/custom/headers/{CustomWorkHeader.Id}", CustomWorkHeader);
        _navigationManager.NavigateTo("/works/custom", true);
    }


    private async Task DeleteLoadLine(CustomWorkLine customWorkLine) {

        var confirm = await _jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the barcode {customWorkLine.BarcodeNo}?");

        if (confirm) {

            var response = await _client.DeleteAsync($"/api/works/custom/lines/{customWorkLine.Id}");
            if(response.IsSuccessStatusCode)
            {
                _snackbar.Add("Line deleted!", Severity.Success);
                CustomWorkLines.Remove(customWorkLine);
            }
            else
            {
                _snackbar.Add("Error deleting line", Severity.Warning);
            }
            
        }
    }

    

}


