@page "/pfm/barcodes/check"
@inject NavigationManager _navigationManager
@inject StateContainer _stateContainer
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client


<h3 class="mb-4">Check Barcode Availability</h3>

@if(Barcodes is not null && _stateContainer.Company is not null)
{

    <div class="col-sm-6">
      <label for="firstName" class="form-label">Barcode No</label>
      <input type="text" class="form-control" id="firstName" placeholder="" @bind="BarcodeNo" required="" />
      <div class="invalid-feedback">
        Barcode No is required!
      </div>
    </div>
    <div class="fixed-bottom p-3 text-center d-flex justify-content-between">
        <a href="/" type="button" class="btn btn-secondary">Cancel</a>
        <button class="btn btn-primary" @onclick="@(() => CheckBarcodeAvailability(BarcodeNo))">Search</button>
    </div>
    
}

<h4 class="pb-3 mt-5">Missing Items</h4>

<div class="list-group col-sm-6 mb-16">
    @if(MissingBarcodes is not null)
    {
        @foreach (var barcode in MissingBarcodes)
        {
            <a class="list-group-item list-group-item-action d-flex gap-3 py-3" aria-current="true">
              <div class="d-flex gap-2 w-100 justify-content-between">
                <div>
                  <h6 class="mb-0">@barcode</h6>
                </div>
              </div>
            </a>
        }
    }
</div>







@code
{
    public string BarcodeNo { get; set; }
    public Barcode Barcode = new Barcode();
    public List<Barcode> Barcodes { get; set; }
    public List<string> MissingBarcodes = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        Barcodes = await _client.GetFromJsonAsync<List<Barcode>>($"api/barcodes/filter?companyId={_stateContainer.Company.Id}");
    }


    private void CheckBarcodeAvailability(string barcodeNo)
    {
        if(Barcodes.Any(b => b.BarcodeNo == barcodeNo))
        {
            _snackbar.Add("Barcode Exists exists!", Severity.Success);
            BarcodeNo = null;
        }
        else
        {
            _snackbar.Add("Barcode does not exist!", Severity.Error);
            MissingBarcodes = new List<string>();
            // add missing barcodes
            MissingBarcodes.Add(barcodeNo);
            BarcodeNo = null;
        }
    }


    

}



