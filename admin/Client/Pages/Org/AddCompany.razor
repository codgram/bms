@page "/companies/create"
@using Microsoft.AspNetCore.Identity
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager
@* @attribute [Authorize(Roles = "Owner, Admin")] *@

<PageTitle>Add User</PageTitle>

<h4 class="mt-5">Add new User</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@Company" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>

        <MudTextField Label="Code" @bind-Value="Company.Code" For="@(() => Company.Code)" @oninput="CompanyExists"/>
            <p>@ErrorMessage</p>
        <MudTextField Label="Name" @bind-Value="Company.Name" For="@(() => Company.Name)" />
        <MudTextField Label="Description" @bind-Value="Company.Description" For="@(() => Company.Description)" />

        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>




@code {
    bool success;
    private string value { get; set; } = "Nothing selected";    
    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    private string storeValue { get; set; } = "Nothing selected";
    private IEnumerable<string> storeOptions { get; set; } = new HashSet<string>();

    private Company Company = new Company();
    private string[] CompanyCodes { get; set; }

    private bool IsError;
    private string ErrorMessage { get; set; }


    
    protected override async Task OnInitializedAsync()
    {
        CompanyCodes = await _client.GetFromJsonAsync<string[]>("api/companies/get?field=names");
    }
    

    private async Task OnValidSubmit() 
    {

        
        var response = await _client.PostAsJsonAsync($"/api/companies", Company);

        if(response.IsSuccessStatusCode)
        {
            
            var userId = response.Content.ReadFromJsonAsync<Company>().Result.Id;

            success = true;
            Snackbar.Add($"New Company is created", Severity.Success);


            _navigationManager.NavigateTo($"companies");
        }
        else
        {
            success = false;
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }
    }

    private void CompanyExists()
    {
        if(CompanyCodes.Contains(Company.Code))
        {
            IsError = true;
            ErrorMessage = "Code already exists!";
        }
    }


    private void OnInValidSubmit() 
    {
        success = false;
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


}