@page "/procurement/purchase/headers"
@using Model.Procurement
@inherits ProcurementBase


<h4 class="mt-5">Purchase Orders</h4>

<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.Upload" OnClick="@(() => ButtonAction = ButtonAction.Import)" data-bs-toggle="offcanvas" data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions" />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" data-bs-toggle="offcanvas" OnClick='@(() => ResetObject("purchaseHeader"))' data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions"/>
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudTable Items="@PurchaseHeaders" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<PurchaseHeader,bool>(FilterPurchaseHeaderFunc)" @bind-SelectedItem="SelectedPurchaseHeader">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Items</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Document No</MudTh>
        <MudTh>Vendor No</MudTh>
        <MudTh>Expected On</MudTh>
        <MudTh>Received On</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Document No">@context.DocumentNo</MudTd>
        <MudTd DataLabel="Vendor No">@context.Vendor.Code</MudTd>
        <MudTd DataLabel="Expected On">@context.ExpectedOn</MudTd>
        <MudTd DataLabel="Expected On">@context.ReceivedOn</MudTd>
        <MudTd DataLabel="Received On">@context.Status </MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.OpenInNew" OnClick='@(() => _navigationManager.NavigateTo($"procurement/purchase/lines/{context.Id}"))'/>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Disabled='@(context.Status != DocumentStatus.Open ? true : false )' OnClick='@(() => GetPurchaseHeaderAsync(context.Id))' data-bs-toggle="offcanvas"  data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions"/>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Inherit" Disabled='@(context.Status != DocumentStatus.Open ? true : false )' OnClick='@(() => OnDeleteAsync(context.Id, "purchase/headers"))' />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @SelectedPurchaseHeader?.DocumentNo</MudText>
    </div>
</div>


<div class="offcanvas offcanvas-end" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Create a new Purchase Order</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close" OnClick='@(() => ResetObject("purchaseHeader"))'></button>
  </div>
  <div class="offcanvas-body">
    
    @if(ButtonAction == ButtonAction.Add)
    {
        <EditForm Model="@PurchaseHeader" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
            <DataAnnotationsValidator/>
    
            <MudTextField Label="Document No" HelperText="Max. 15 characters" Disabled='@(SubmitButtonText == "Save" ? true : false)' @bind-Value="PurchaseHeader.DocumentNo" For="@(() => PurchaseHeader.DocumentNo)" />
            
            <MudSelect HelperText="Choose vendor" T="string" Label="Vendor" Variant="Variant.Text"  @bind-Value="PurchaseHeader.VendorId">
                @if(Vendors is not null) {
                    @foreach (var vendor in Vendors)
                    {
                        <MudSelectItem Value="@vendor.Id"> @vendor.Code - @vendor.Name</MudSelectItem>
                    }
                }
                
            </MudSelect>
    
    
            <MudDatePicker Label="Expected On" @bind-Date="PurchaseHeader.ExpectedOn" />
                
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" data-bs-dismiss="offcanvas" aria-label="Close" >@SubmitButtonText</MudButton>
            </MudCardActions>
        </EditForm>
    }
    else
    {
        <MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="300px" Outlined="true" Class="@DragClass">
            @if (!Clearing)
            {
                <InputFile OnChange="OnInputFileChanged" multiple  class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
            }
            <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
            @foreach (var file in fileNames)
            {
                <MudChip Color="Color.Dark" Text="@file" />
            }
        </MudPaper>
        <MudToolBar DisableGutters="true" Class="gap-4">
            <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
            <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
        </MudToolBar>

        @if (isLoading)
        {
            <p>@Message</p>
            <div class="progress">
                <div class="progress-bar" role="progressbar" style='@($"width: {Progress}%;")' aria-valuenow="@Progress" aria-valuemin="0" aria-valuemax="100">@Progress %</div>
            </div>
        }
    }



  </div>
</div>



@code {

    private bool Clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    private string Message { get; set; } = "";
    private string Progress { get; set; } = "";

    private List<IBrowserFile> loadedFiles = new();
    private IBrowserFile file {get; set;}
    private long maxFileSize = 1024 * 10000;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private StreamContent fileContent { get; set; }

    private bool FileIsUploaded { get; set; }

    List<Item> Items = new List<Item>();
    Item Item = new Item();

    IBrowserFile File { get; set; }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        File = e.GetMultipleFiles().FirstOrDefault();
        fileNames.Add(File.Name);
    }

    private async Task Clear()
    {
        Clearing = true;
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }


    private async Task Upload() //InputFileChangeEventArgs e
    {
        //Upload the files here
        _snackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        isLoading = true;
        StateHasChanged();
        loadedFiles.Clear();

        try
        {
            file = File;
            FileIsUploaded = true;
            
        }
        catch (Exception ex)
        {
            FileIsUploaded = false;
            Console.WriteLine($"File: {file.Name} Error: {ex.Message}");
        }
        if(FileIsUploaded && file.ContentType == "text/csv")
        {
            StreamReader reader = new StreamReader(file.OpenReadStream(maxFileSize));
            
            var count = 1;
            var content = await reader.ReadToEndAsync();
            var lines = content.Split("\n").Where(l => !l.StartsWith("DocumentNo") && !String.IsNullOrEmpty(l)).ToArray();
            Message = $"Gathering data from {file.Name}";
            foreach(var line in lines.Where(l => !l.StartsWith("DocumentNo"))) {
                
                var values = line.Split(",");
                
                Item.CompanyId = _stateContainer.Company.Id;
                Item.Code = values[0];
                Item.SubgroupId = values[1];
                Item.VendorId = values[2];
                Item.Type = Item.ConvertStringToItemType(values[3]);
                Item.Name = values[4];
                
                Items.Add(Item);
                Item = new Item();
            }
            if(Items is not null)
            {
                var winesCount = Items.Count();
                foreach(var item in Items)
                {
                    count++;
                    Message = $"Updating Item {count} of {winesCount}";
                    Progress = Convert.ToInt16(((decimal)count / (decimal)winesCount) * 100).ToString();
                    
                    StateHasChanged();
                    
                    await _client.PostAsJsonAsync<Item>("api/items", item);
                }
            }
        }
        StateHasChanged();
        Items = null;
        isLoading = false;
    }










    protected override async Task OnInitializedAsync()
    {
        SubmitButtonText = "Add";
        PurchaseHeaders = await GetObjectsAsync<PurchaseHeader>("purchase/headers");
        Vendors = await GetObjectsAsync<Vendor>("vendors");
    }


    public async Task OnValidSubmit()
    {
        if (SubmitButtonText.ToLower() == "add")
        {
            PurchaseHeader.CompanyId = _stateContainer.Company.Id;
            var response = await _client.PostAsJsonAsync<PurchaseHeader>("api/purchase/headers", PurchaseHeader);
            if (response.IsSuccessStatusCode)
            {
                _snackBar.Add("PurchaseHeader Added Successfully", Severity.Success);
                _navigationManager.NavigateTo("/procurement/purchase/headers");

                // get purchase header from response
                var purchaseHeader = await response.Content.ReadFromJsonAsync<PurchaseHeader>();

                PurchaseHeaders.Add(purchaseHeader);
            }
            else if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                // get error message from response
                var errorMessage = await response.Content.ReadAsStringAsync();
                
                _snackBar.Add(errorMessage, Severity.Error);
            }
            else
            {
                _snackBar.Add("Purchase Order Add Failed", Severity.Error);
            }
        }
        else if (SubmitButtonText.ToLower() == "save")
        {
            var response = await _client.PutAsJsonAsync<PurchaseHeader>($"api/purchase/headers/{PurchaseHeader.Id}", PurchaseHeader);
            if (response.IsSuccessStatusCode)
            {
                _snackBar.Add("PurchaseHeader Updated Successfully", Severity.Success);
                _navigationManager.NavigateTo("/procurement/purchase/headers");
                
                // update purchaseHeader in list
                var index = PurchaseHeaders.FindIndex(x => x.Id == PurchaseHeader.Id);
                PurchaseHeaders[index] = PurchaseHeader;
            }
            else
            {
                _snackBar.Add("Purchase Order Update Failed", Severity.Error);
            }
        }
    }
}