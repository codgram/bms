@page "/admin/users"
@using System.Net.Http.Json
@inject HttpClient _client
@inject IJSRuntime _jsRuntime
@inject ISnackbar Snackbar
@inject NavigationManager _navigationManager
@inject StateContainer _stateContainer

<PageTitle>Users</PageTitle>

<h4 class="mt-5">Users</h4>

<AuthorizeView Roles='@($"{_stateContainer.Company.Code}_Owner, {_stateContainer.Company.Code}_Admin")'>
    <Authorizing>
        <p>Authorizing the page ...</p>
    </Authorizing>
    <Authorized>
        <MudPaper Elevation="25" Class="mb-2 mt-4">
            <MudToolBar>
                <MudText>
                    <Navigation />
                </MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick='@(() => Navigate("admin/users/add"))' />
                    <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
                </MudToolBar>
        </MudPaper>

    <MudTable Items="@ApplicationUsers" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ApplicationUser,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Users</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Username</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="user">
            <MudTd DataLabel="Username">@user.UserName</MudTd>
            <MudTd DataLabel="Email">@user.Email</MudTd>
            <MudTd DataLabel="First Name">@user.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@user.LastName</MudTd>
            <MudTd DataLabel="Action">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick='@(() => Navigate($"admin/users/{user.Id}/edit"))'/>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Inherit" OnClick="@(() => OnDeleteAsync(user.Id))" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Key" OnClick='@(() => Navigate($"admin/users/{user.Id}/reset-password"))'/>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <div style="min-width:200px;">
            <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.UserName</MudText>
        </div>
    </div>
    </Authorized>
    <NotAuthorized>
        @*Alert*@
        <MudAlert Severity="Severity.Error" Class="mt-4">
            <MudText>Not authorized to view this page.</MudText>
        </MudAlert>
    </NotAuthorized>

</AuthorizeView>





@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ApplicationUser selectedItem1 = null;
    private HashSet<ApplicationUser> selectedItems = new HashSet<ApplicationUser>();

    private List<ApplicationUser> ApplicationUsers = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ApplicationUsers = await _client.GetFromJsonAsync<List<ApplicationUser>>($"api/users?companyId={_stateContainer.Company.Id}");
        }
        catch (HttpRequestException ex)
        {
            if(ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("You are not authorized!", Severity.Error);
            }
            
        }
        
    }

    private bool FilterFunc1(ApplicationUser ApplicationUser) => FilterFunc(ApplicationUser, searchString1);

    private bool FilterFunc(ApplicationUser ApplicationUser, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (ApplicationUser.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ApplicationUser.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{ApplicationUser.FirstName} {ApplicationUser.LastName}".Contains(searchString))
            return true;
        return false;
    }

    private async void OnDeleteAsync(string id)
    {
        // prompt the user to confirm
        var confirmResult = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        var applicationUser = ApplicationUsers.FirstOrDefault(j => j.Id == id);


        if(confirmResult) {

            var request = await _client.DeleteAsync($"api/users/{id}");

            if(request.IsSuccessStatusCode) {
                Snackbar.Add($"User {applicationUser.UserName} is deleted", Severity.Success);
                ApplicationUsers.Remove(applicationUser);
                StateHasChanged();
            }
            else {
                Snackbar.Add($"User is not deleted", Severity.Error);
            }
        }
        else {
            Snackbar.Add($"Operation was canceled", Severity.Info);
        }
        
    }


    private void Navigate(string url)
    {
        _navigationManager.NavigateTo(url);
    }
}