@page "/pfm/subgroups"
@inherits ProductHierarchyBase


<h4 class="mt-5">Subgroup</h4>

<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" data-bs-toggle="offcanvas" OnClick='@(() => ResetObject("subgroup"))' data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions"/>
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudTable Items="@Subgroups" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Subgroup,bool>(FilterSubgroupFunc)" @bind-SelectedItem="SelectedSubgroup">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Subgroups</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Code</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => GetSubgroupAsync(context.Id))" data-bs-toggle="offcanvas"  data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions"/>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Inherit" OnClick='@(() => OnDeleteAsync(context.Id, "subgroup"))' />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @SelectedSubgroup?.Name</MudText>
    </div>
</div>


<div class="offcanvas offcanvas-end" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Create a new Subgroup</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close" OnClick='@(() => ResetObject("subgroup"))'></button>
  </div>
  <div class="offcanvas-body">
    

    <EditForm Model="@Subgroup" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>

        <MudSelect HelperText="Choose entity" T="string" Label="Group" Variant="Variant.Text"  @bind-Value="Subgroup.GroupId">
            @if(Groups is not null) {
                @foreach (var group in Groups)
                {
                    <MudSelectItem Value="@group.Id"> @group.Code - @group.Name</MudSelectItem>
                }
            }
            
        </MudSelect>

        <MudTextField Label="Code" HelperText="Max. 15 characters" @bind-Value="Subgroup.Code" For="@(() => Subgroup.Code)" />
        <MudTextField Label="Name" HelperText="Max. 100 characters" @bind-Value="Subgroup.Name" For="@(() => Subgroup.Name)" />
        <MudTextField Label="Description" HelperText="Max. 100 characters" @bind-Value="Subgroup.Description" For="@(() => Subgroup.Description)" />
            
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" data-bs-dismiss="offcanvas" aria-label="Close" >@SubmitButtonText</MudButton>
        </MudCardActions>
    </EditForm>


  </div>
</div>



@code {
    protected override async Task OnInitializedAsync()
    {
        SubmitButtonText = "Add";
        Subgroups = await GetObjectsAsync<Subgroup>("subgroups");
        Groups = await GetObjectsAsync<Group>("groups");
    }


    public async Task OnValidSubmit()
    {
        if (SubmitButtonText.ToLower() == "add")
        {
            var response = await _client.PostAsJsonAsync<Subgroup>("api/subgroups", Subgroup);
            if (response.IsSuccessStatusCode)
            {
                _snackBar.Add("Subgroup Added Successfully", Severity.Success);
                _navigationManager.NavigateTo("/pfm/subgroups");
                Subgroups.Add(Subgroup);
            }
            else
            {
                _snackBar.Add("Subgroup Add Failed", Severity.Error);
            }
        }
        else if (SubmitButtonText.ToLower() == "save")
        {
            var response = await _client.PutAsJsonAsync<Subgroup>($"api/subgroups/{Subgroup.Id}", Subgroup);
            if (response.IsSuccessStatusCode)
            {
                _snackBar.Add("Subgroup Updated Successfully", Severity.Success);
                _navigationManager.NavigateTo("/pfm/subgroups");
                
                // update subgroup in list
                var index = Subgroups.FindIndex(x => x.Id == Subgroup.Id);
                Subgroups[index] = Subgroup;
            }
            else
            {
                _snackBar.Add("Subgroup Update Failed", Severity.Error);
            }
        }
    }
}