@page "/pfm/groups"
@inherits ProductHierarchyBase


<h4 class="mt-5">Group</h4>

<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" data-bs-toggle="offcanvas" OnClick='@(() => ResetObject("group"))' data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions"/>
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudTable Items="@Groups" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Group,bool>(FilterGroupFunc)" @bind-SelectedItem="SelectedGroup">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Items</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Code</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => GetGroupAsync(context.Id))" data-bs-toggle="offcanvas"  data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions"/>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Inherit" OnClick='@(() => OnDeleteAsync(context.Id, "group"))' />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @SelectedGroup?.Name</MudText>
    </div>
</div>


<div class="offcanvas offcanvas-end" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Create a new Group</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close" OnClick='@(() => ResetObject("group"))'></button>
  </div>
  <div class="offcanvas-body">
    

    <EditForm Model="@Group" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>

        <MudSelect HelperText="Choose entity" T="string" Label="Category" Variant="Variant.Text"  @bind-Value="Group.CategoryId">
            @if(Categories is not null) {
                @foreach (var category in Categories)
                {
                    <MudSelectItem Value="@category.Id"> @category.Code - @category.Name</MudSelectItem>
                }
            }
            
        </MudSelect>

        <MudTextField Label="Code" HelperText="Max. 15 characters" @bind-Value="Group.Code" For="@(() => Group.Code)" />
        <MudTextField Label="Name" HelperText="Max. 100 characters" @bind-Value="Group.Name" For="@(() => Group.Name)" />
        <MudTextField Label="Description" HelperText="Max. 100 characters" @bind-Value="Group.Description" For="@(() => Group.Description)" />
            
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" data-bs-dismiss="offcanvas" aria-label="Close" >@SubmitButtonText</MudButton>
        </MudCardActions>
    </EditForm>


  </div>
</div>



@code {
    protected override async Task OnInitializedAsync()
    {
        SubmitButtonText = "Add";
        Groups = await GetObjectsAsync<Group>("groups");
        Categories = await GetObjectsAsync<Category>("categories");
    }


    public async Task OnValidSubmit()
    {
        if (SubmitButtonText.ToLower() == "add")
        {
            var response = await _client.PostAsJsonAsync<Group>("api/groups", Group);
            if (response.IsSuccessStatusCode)
            {
                _snackBar.Add("Group Added Successfully", Severity.Success);
                _navigationManager.NavigateTo("/pfm/groups");
                Groups.Add(Group);
            }
            else
            {
                _snackBar.Add("Group Add Failed", Severity.Error);
            }
        }
        else if (SubmitButtonText.ToLower() == "save")
        {
            var response = await _client.PutAsJsonAsync<Group>($"api/groups/{Group.Id}", Group);
            if (response.IsSuccessStatusCode)
            {
                _snackBar.Add("Group Updated Successfully", Severity.Success);
                _navigationManager.NavigateTo("/pfm/groups");
                
                // update group in list
                var index = Groups.FindIndex(x => x.Id == Group.Id);
                Groups[index] = Group;
            }
            else
            {
                _snackBar.Add("Group Update Failed", Severity.Error);
            }
        }
    }
}